% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validation.R
\name{validate_json_data}
\alias{validate_json_data}
\alias{validate_json_data.schema}
\alias{validate_json_data.schema_string}
\title{Validate JSON data lists with JSON Schemes.}
\usage{
validate_json_data(schema, data, ...)

\method{validate_json_data}{schema}(schema, data, engine = "ajv", ...)

\method{validate_json_data}{schema_string}(schema, data, engine = "ajv", ...)
}
\arguments{
\item{schema}{JSON Schema: \code{\link{schema}} or
\code{\link{schema_string}} object}

\item{data}{a list of class \code{\link{json_data}} with JSON data objects}

\item{...}{extra arguments passed to methods and
\code{\link[jsonvalidate]{json_validate}}}

\item{engine}{validation engine. See:
\code{\link[jsonvalidate]{json_validate}} for details}
}
\value{
a logical vector: \code{TRUE} stands for positive validation.
}
\description{
\code{validate_json_data()} methods take a JSON Schema object (an object of class
\code{\link{schema}} or \code{\link{schema_string}}) and a
\code{\link{json_data}} list of JSON data objects.
}
\details{
A handy wrapper around \code{\link[jsonvalidate]{json_validate}}.
For details, please consult
\href{https://docs.ropensci.org/jsonvalidate/articles/jsonvalidate.html}{jsonvalidate manuals}.
The function will run in parallel if a parallel backend is declared with
\code{\link[future]{plan}}. The backend will be closed afterwards.
}
\examples{
car_documentation <- create_doc(my_cars)
car_schema <- build_schema(car_documentation)
car_data <- df2json(my_cars, names_from = 'ID')
validate_json_data(schema = car_schema, data = car_data)

}
